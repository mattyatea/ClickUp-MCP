---
description: コード品質管理・テスト戦略・禁止事項・チェックリスト
globs: ["**/*"]
alwaysApply: true
---

# コード品質管理

## 🚫 禁止事項

### 絶対禁止
- **`any`型の使用**: 具体的な型を定義
- **機密情報のハードコード**: 環境変数やシークレット管理を使用
- **`console.log`の本番残留**: 本番環境では適切なログレベル設定
- **未処理のPromise**: 必ず`await`または適切なエラーハンドリング
- **`eval()`の使用**: セキュリティリスクのため禁止

### 強く非推奨
- **Promiseチェーン**: `async/await`を使用
- **深いネスト**: 早期returnやガード句を使用
- **巨大な関数**: 単一責任の原則に従って分割
- **マジックナンバー**: 名前付き定数を使用
- **グローバル変数**: 依存性注入やモジュールパターンを使用

## ✅ 品質基準

### 必須チェック項目
- [ ] 全ての関数に型定義がある
- [ ] エラーハンドリングが適切に実装されている
- [ ] 非同期処理で`async/await`を使用している
- [ ] 命名規約に従っている
- [ ] 単一責任の原則に従っている
- [ ] 適切なコメントが書かれている

### 推奨チェック項目
- [ ] 関数の複雑度が適切（10行以下を目安）
- [ ] DRY原則に従っている（重複コードの排除）
- [ ] SOLID原則に従っている
- [ ] 適切な抽象化レベルを保っている
- [ ] 型ガードを適切に使用している

## 🧪 テスト戦略

### テスト階層
```
単体テスト (Unit Tests)
├── 関数・メソッドの動作確認
├── 型安全性の確認
└── エラーハンドリングの確認

統合テスト (Integration Tests)
├── API呼び出しの確認
├── データベース接続の確認
└── 外部サービス連携の確認

E2Eテスト (End-to-End Tests)
├── ユーザーフローの確認
├── OAuth認証フローの確認
└── 全体的な動作確認
```

### テストファイル命名規約
```
src/
├── utils/
│   ├── formatters.ts
│   └── formatters.test.ts
├── api/
│   ├── basic.ts
│   └── basic.test.ts
└── __tests__/
    ├── integration/
    └── e2e/
```

### テストのベストプラクティス
```typescript
// ✅ 良いテスト
describe('formatTimestamp', () => {
  it('有効なタイムスタンプを正しい形式に変換する', () => {
    const result = formatTimestamp(1640995200000);
    expect(result).toBe('2022/01/01 00:00:00');
  });

  it('無効な入力に対してnullを返す', () => {
    expect(formatTimestamp(null)).toBeNull();
    expect(formatTimestamp('')).toBeNull();
    expect(formatTimestamp('invalid')).toBeNull();
  });
});

// ❌ 悪いテスト
describe('test', () => {
  it('works', () => {
    expect(someFunction()).toBeTruthy();
  });
});
```

## 📊 メトリクス・監視

### コード品質メトリクス
- **型カバレッジ**: 95%以上
- **関数あたりの行数**: 20行以下を目安
- **複雑度**: 関数あたり10以下
- **重複コード**: 5%以下
- **テストカバレッジ**: 80%以上

### パフォーマンス監視
```typescript
// パフォーマンス測定の例
async function measurePerformance<T>(
  operation: () => Promise<T>,
  operationName: string
): Promise<T> {
  const start = performance.now();
  try {
    const result = await operation();
    const duration = performance.now() - start;
    
    // 5秒を超える場合は警告
    if (duration > 5000) {
      console.warn(`${operationName} took ${duration}ms`);
    }
    
    return result;
  } catch (error) {
    const duration = performance.now() - start;
    console.error(`${operationName} failed after ${duration}ms:`, error);
    throw error;
  }
}
```

## 🔧 静的解析ツール

### 推奨ツール
```json
{
  "scripts": {
    "type-check": "tsc --noEmit",
    "lint": "eslint src/**/*.ts",
    "format": "prettier --write .",
    "format-check": "prettier --check .",
    "audit": "npm audit --audit-level=moderate"
  }
}
```

### ESLint設定例
```javascript
// .eslintrc.js
module.exports = {
  extends: [
    '@typescript-eslint/recommended',
    'prettier'
  ],
  rules: {
    '@typescript-eslint/no-explicit-any': 'error',
    '@typescript-eslint/no-unused-vars': 'error',
    'prefer-const': 'error',
    'no-console': 'warn'
  }
};
```

## 🚨 エラーハンドリング品質

### 統一されたエラーパターン
```typescript
// 基本エラークラス
class AppError extends Error {
  constructor(
    message: string,
    public code: string,
    public statusCode: number = 500
  ) {
    super(message);
    this.name = 'AppError';
  }
}

// API エラー
class ApiError extends AppError {
  constructor(message: string, statusCode: number, code?: string) {
    super(message, code || 'API_ERROR', statusCode);
  }
}

// バリデーションエラー
class ValidationError extends AppError {
  constructor(message: string, field?: string) {
    super(message, 'VALIDATION_ERROR', 400);
    if (field) {
      this.message = `${field}: ${message}`;
    }
  }
}
```

### エラーログ形式
```typescript
// 構造化ログ
function logError(error: Error, context?: Record<string, unknown>) {
  const logData = {
    timestamp: new Date().toISOString(),
    level: 'error',
    message: error.message,
    stack: error.stack,
    context: context || {}
  };
  
  console.error(JSON.stringify(logData));
}
```

## 📋 コードレビューチェックリスト

### 機能性
- [ ] 要件を満たしている
- [ ] エッジケースを考慮している
- [ ] 適切なエラーハンドリング
- [ ] パフォーマンスの問題がない

### 保守性
- [ ] コードが理解しやすい
- [ ] 適切な命名規約
- [ ] 適切なコメント
- [ ] 将来の拡張性を考慮

### セキュリティ
- [ ] 入力値検証が適切
- [ ] 機密情報の漏洩がない
- [ ] 適切な権限チェック
- [ ] SQLインジェクション対策

### テスト
- [ ] テストが適切に書かれている
- [ ] テストカバレッジが十分
- [ ] 境界値テストが含まれている
- [ ] 統合テストが適切

## 🎯 品質向上のためのプラクティス

### 継続的改善
```typescript
// TODO: 技術的負債の管理
// FIXME: 既知の問題の修正
// HACK: 一時的な解決策（後で修正予定）
// NOTE: 重要な注意事項
```

### 依存関係管理
```bash
# 脆弱性チェック
npm audit

# 依存関係の更新
npm update

# 未使用依存関係の確認
npx depcheck
```

### 文書化
```typescript
/**
 * ユーザー情報を取得する
 * @param id - ユーザーID
 * @param includeProfile - プロフィール情報を含めるか
 * @returns ユーザー情報
 * @throws {ValidationError} 無効なIDの場合
 * @throws {ApiError} API呼び出しが失敗した場合
 */
async function getUser(
  id: string, 
  includeProfile: boolean = false
): Promise<User> {
  // 実装
}
```

## 🔍 定期的な品質チェック

### 週次チェック
- [ ] 型チェックの実行
- [ ] フォーマットチェック
- [ ] 未使用依存関係の確認
- [ ] セキュリティ監査

### 月次チェック
- [ ] 依存関係の更新
- [ ] テストカバレッジの確認
- [ ] パフォーマンス測定
- [ ] 技術的負債の棚卸し

### リリース前チェック
- [ ] 全自動テストの実行
- [ ] 手動テストの実行
- [ ] セキュリティチェック
- [ ] パフォーマンス検証
- [ ] 文書の更新
description:
globs:
alwaysApply: false
---
